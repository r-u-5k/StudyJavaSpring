<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis3.dao.mapper.StudentMapper">
	<!-- 
	############################## 
	resultMap정의 
	############################# 
	-->
	<resultMap type="com.mybatis3.domain.Student" id="studentResultMap" autoMapping="true">
		<id column="STUD_ID" property="studId"/> 
		<result column="NAME" property="name"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="DOB" property="dob"/>		
		<association column="ADDR_ID" property="address" 
					 resultMap="com.mybatis3.dao.mapper.AddressMapper.addressResultMap">
		</association>
		<collection property="courseList" ofType="com.mybatis3.domain.Course" 
					autoMapping="true">
			<result column="COURSE_NAME" property="name"/>
		</collection>
	</resultMap>
	
	<!-- 
	/************************************************** 
	INSERT 
	***************************************************/ 
	parameterType: DTO,VO,Domain 
	-->
	<!-- <insert id="insertStudentBySequence" parameterType="com.mybatis3.domain.Student">
		INSERT INTO STUDENTS (STUD_ID, NAME, PHONE, EMAIL, DOB) 
		VALUES (STUDENTS_STUD_ID_SEQ.NEXTVAL, #{name}, #{phone}, #{email}, #{dob})
	</insert>
	
	<insert id="insertStudentBySequenceReturnPrimaryKey" parameterType="com.mybatis3.domain.Student">
		<selectKey order="BEFORE" resultType="int" keyProperty="studId">
			SELECT STUDENTS_STUD_ID_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO STUDENTS (STUD_ID, NAME, PHONE, EMAIL, DOB) 
		VALUES (#{studId}, #{name}, #{phone}, #{email}, #{dob})
	</insert> -->
	
	<!-- 
	/************************************************** 
	UPDATE 
	***************************************************/ 
	parameterType: DTO,VO,Domain 
	-->
	<update id="updateStudentById" parameterType="com.mybatis3.domain.Student">
		UPDATE STUDENTS SET NAME = #{NAME}, EMAIL = #{EMAIL}, 
							PHONE = #{PHONE}, DOB = #{DOB}
		WHERE STUD_ID = #{STUDID}
	</update>

	<!-- 
	/************************************************** 
	DELETE 
	***************************************************/ 
	parameterType: java.lang.Integer,java.lang.String 
	-->
	<delete id="deleteStudentById" parameterType="int">
		DELETE FROM STUDENTS WHERE STUD_ID = #{STUD_ID}
	</delete>
	<delete id="deleteStudentByName" parameterType="String">
		DELETE FROM STUDENTS WHERE NAME = #{NAME}
	</delete>
	<delete id="deleteStudentByNameLike">
		
	</delete>

	<!-- 
	/************************************************** 
	5. SELECT[students + address + courses[course_enrollment] JOIN( 1 : 1 : N ) 
	**************************************************/ 
	/*
	 * resultMap : studentWithAddressAndCoursesResultMap
	 */ 
	-->
	<select id="findStudentByIdWithAddressAndCourses">
		
	</select>

	<!-- 
	/******************************************************************** 
	4. SELECT[students + course_enrollment (+ course) JOIN( 1 : N ) 
	********************************************************************/ 
	/*
	 * resultMap : studentWithCoursesResultMap 
	 */ 
	-->
	<select id="findStudentByIdWithCourses" resultMap="studentResultMap" parameterType="int">
		SELECT S.*, C.*, C.NAME AS COURSE_NAME 
		FROM STUDENTS S 
		JOIN COURSE_ENROLLMENT CE
		ON S.STUD_ID = CE.STUD_ID
		JOIN COURSES C
		ON CE.COURSE_ID = C.COURSE_ID WHERE S.STUD_ID = #{STUDID}
	</select>

	<!-- 
	/************************************************** 
	3. SELECT[student + address JOIN]( 1 : 1 ) 
	**************************************************/ 
	/*
	 * resultMap : studentWithAddressResultMap 
	 */ 
	 -->
	<!-- <select id="findStudentByIdWithAddress" parameterType="int" resultMap="studentResultMap">
		SELECT STUD_ID, NAME, EMAIL, DOB, A.ADDR_ID, STREET, CITY, STATE, ZIP, COUNTRY
  		FROM STUDENTS S
 		LEFT OUTER JOIN ADDRESSES A ON S.ADDR_ID = A.ADDR_ID
 		WHERE STUD_ID = #{STUDID}
	</select> -->

	<!-- 
	/************************************************** 
	1. SELECT[결과타입이 DTO[DTO List] 객체인경우] 
	**************************************************/
	-->
	<!-- 
	resultType : Dto 
	-->
	<!-- <select id="findStudentById" parameterType="int" resultType="com.mybatis3.domain.Student">
		select stud_id,name,phone,email,dob from students where stud_id=#{studId}
	</select>
	<select id="findAllStudents" resultType="com.mybatis3.domain.Student">
		select stud_id,name,phone,email,dob from students
	</select> -->
	<!-- 
	resultMap : DTO 
	-->
	<!-- <select id="findStudentByIdResultMap" parameterType="int" resultMap="studentResultMap">
		select stud_id,name,phone,email,dob from students where stud_id=#{studId}
	</select>
	<select id="findAllStudentsResultMap" resultMap="studentResultMap">
		select stud_id,name,phone,email,dob from students
	</select> -->
	<!-- 
	/********************************************************************** 
	2. SELECT[결과타입이 Wrapper(String)[Wrapper(String) List]객체인경우]
	*******************************************************************/ 
	/* 
	resultType : String,Wrapper,List<Wrapper>,List<String> 
	*/ 
	-->
	<select id="findStudentNameById" parameterType="java.lang.Integer" resultType="java.lang.String">
		select name from students where stud_id=#{studId}
	</select>
	<select id="findStudentNameList" resultType="java.lang.String">
		select name from students
	</select>
	
	 <!-- 
	/**************************************************
	 결과데이타를 Map(HashMap)에 담아서 반환할수있다
	***************************************************/
		resultType:Map,HashMap	
	-->
	<!-- resultType Map -->
	<select id="findStudentByIdMap" parameterType="java.lang.Integer" resultType="java.util.Map">
		select stud_id as studid ,name,email,phone,dob 
		from students
		where stud_id = #{studId}
	</select>
	
	
	<!-- resultType List<Map> -->
	<select id="findAllStudentsMapList" resultType="java.util.Map">
		select stud_id as studid ,name,email,dob,phone
		from students
	</select>
	
	<update id="updateStudentParamMap" parameterType="java.util.Map">
		update students set name=#{name},email=#{email},dob=#{dob}
		where stud_id=#{studId}
	</update>
	 <!-- 
	/**************************************************
	 파라메타데이타를 Map(HashMap)에 담아서 전달할수있다
	***************************************************/
		resultType:Map,HashMap	
	-->
	<!-- @@@@@@@@@ parameterType[java.util.Map,java.util.HashMap,map,hashmap] @@@@@ -->
	<select id="findStudentByIdRangeParamMap" 
			parameterType="map"
			resultType="com.mybatis3.domain.Student">
		select stud_id as studid ,name,email,dob 
		from students
		where stud_id &gt;= #{startNo} and stud_id &lt;= #{endNo}
	</select>
	
	<select id="findStudentsThreeParamMap" 
			parameterType="map"
			resultType="com.mybatis3.domain.Student">
		select stud_id as studid ,name,email,dob 
		from students
		where stud_id in(#{first.studId},#{second.studId},#{third.studId})
	</select>
</mapper>