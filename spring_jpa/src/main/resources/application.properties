logging.level.org.hibernate.type.descriptor.sql=trace
logging.level.org.hibernate.orm.jdbc.bind=trace
#logging.level.org.hibernate.SQL=debug

spring.datasource.url=jdbc:oracle:thin:@124.198.47.195:1521:XE
spring.datasource.username=jdeveloper73
spring.datasource.password=jdeveloper73
#########JPA설정############
#spring.jpa.hibernate.ddl-auto=create 
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#script 파일이 hibernate 초기화 이후 동작하게 하기 위한 옵션
#spring.jpa.defer-datasource-initialization=true

########sql초기화설정##########
#spring.sql.init.mode=always
#spring.sql.init.schema-locations=classpath:user.ddl 
#spring.sql.init.data-locations=classpath:user-insert.sql,classpath:guest-insert.sql,classpath:board-insert.sql
#spring.sql.init.data-locations=classpath:board-insert.sql
#spring.sql.init.continue-on-error=false  

###########################################################################
##################JPA설정[spring.jpa.hibernate.ddl-auto=<create>###########
###########################################################################
#	ddl-auto에는 아래와 같이 5가지 종류의 속성이 있다.
#	 - create,create-drop,update,validate,none(default)
# 	1.create
#	 	create는 단어 그대로 엔티티로 등록된 클래스와 매핑되는 테이블을 자동으로 생성(create)해준다. 
#	 	이 과정에서 기존에 해당 클래스와 매핑되는 테이블이 존재한다면 기존 테이블을 삭제(drop)하고 테이블을 생성한다.
# 	2.create-drop
#		create-drop은 create와 비슷하게 엔티티로 등록된 클래스와 매핑되는 테이블이 존재한다면 기존 테이블을 삭제하고 
#		자동으로 테이블을 생성해주는 것은 똑같지만, 애플리케이션이 종료될 때 테이블을 삭제한다는 차이가 있다.
# 	3.update
# 		update는 엔티티로 등록된 클래스와 매핑되는 테이블이 없으면 새로 생성하는 것은 create와 동일하지만 
#   	기존 테이블이 존재한다면 위의 두 경우와 달리 테이블의 컬럼을 변경하게 된다.
#		하지만, 일반적으로 생각하는 update와는 달리 모든 변경사항을 반영하는 것이 아니다. 
#		기존에 존재하는 컬럼의 속성(nullable, 크기, 데이터 타입 등)은 건드리지 않고, 
#		새로운 컬럼이 추가되는 변경사항만 반영한다. 
#		가령, 어떠한 엔티티 클래스의 String 필드를 Int로 변경하더라도 
#		해당 엔티티에 매핑되는 테이블의 해당 컬럼은 숫자타입으로 바뀌지 않고 문자열 타입으로 유지된다.
#		
#		update 속성은 테이블이 존재하지 않으면 새로운 테이블을 생성한다.
#		기존 테이블이 존재하고 엔티티의 필드가 추가되면 테이블에 추가된 필드에 해당하는 컬럼을 추가한다.
# 	4.validate
#		validate는 다른 속성들과는 다르게 DDL을 작성하여 테이블을 생성하거나 수정하지 않고, 
#		엔티티 클래스와 테이블이 정상적으로 매핑되는지만 검사한다. 
#		만약 테이블이 아예 존재하지 않거나, 테이블에 엔티티의 필드에 매핑되는 컬럼이 존재하지 않으면 
#		예외를 발생시키면서 애플리케이션을 종료한다.
#	
#		이 경우도 update와 비슷하게 엔티티 클래스의 필드가 매핑되는 테이블에 모두 존재하기만 한다면, 
#		테이블의 컬럼이 더 많더라도 아무 일도 일어나지 않는다.
#		엔티티 클래스와 테이블이 매핑되지 않으면 예외를 발생시키면서 애플리케이션이 종료된다.
# 5.none(default)
#		none은 사실 속성이 존재하는 것이 아니라 위의 4가지 경우를 제외한 모든 경우에 해당한다.
#		(다만 스프링부트의 경우에는 none이라고 명시하거나 아예 ddl-auto 속성을 명시하지 않아야 한다.) 
#		이 경우에는 아무 일도 일어나지 않는다.
#
# ddl-auto 속성 사용방법
#	 	- 개발 초기 단계 또는 로컬에서 테스트 : create 또는 update
#		- 테스트 서버 : update 또는 validate
#		- 스테이징 및 운영 서버 : validate 또는 none
# ddl-auto 속성을 사용시 주의사항
#		이상의 ddl-auto 속성들은 얼핏 보기엔 굉장히 편리해보이지만 validate와 none을 제외한 속성은 운영 DB에는 사용하면 안된다. 
#		create나 create-drop으로 설정한 채로 운영 DB에 연결하여 애플리케이션을 실행해버리면 운영 DB의 테이블이 삭제되는 일이 일어나게 된다.
#		update라고 하더라도 문제가 될 수 있는 것이, 만약 update로 인해 새로 추가된 컬럼이 not null이라면 해당 변경사항이 반영되지 않은 버전을 배포하게 되었을 때 테이블에 데이터가 INSERT 되지 않을 수 있다.
##########################################################################

###########################################################################
##################sql초기화설정[spring.sql.init.mode=always]###############
###########################################################################
#	모든 데이터베이스에 sql script를 동작시키는 'always'
#	embedded(내장) 데이터베이스만 sql 스크립트를 동작시키는 'embedded' 
#	모든 데이터베이스에 sql script를 동작시키지 않는 'never'
##########################################################################


###########################################################################
##################sql script 초기화와 JPA초기화의순서######################
###########################################################################
#1. ddl-auto=create이고 schema.sql,data.sql 모두 있을 때
#    schema.sql -> data.sql -> ddl-auto=create
#2. ddl-auto=create이고 data.sql만 있을 경우#
#	 data.sql -> ddl-auto=create
#    (결과는 SQLSyntaxErrorException: Table 'member' doesn't exist 발생)
#3. ddl-auto=none이고 schema.sql, data.sql 모두 있을 때
#	schema.sql -> data.sql
#	(정상적으로 실행되며 ddl-auto=none 이기 때문에 defer 옵션과는 관계가 없습니다.)
#4. ddl-auto=none이고 data.sql만 있을 때
#    SQLSyntaxErrorException: Table 'member' doesn't exist
########sql script 초기화가 JPA초기화이후 동작하게 하기 위한 옵션##########
#spring.jpa.defer-datasource-initialization=true
###########################################################################





